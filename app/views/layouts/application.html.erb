<!DOCTYPE html>
<html>
<head>
  <title>Waste5</title>
  <%= stylesheet_link_tag    "application", media: "all", "data-turbolinks-track" => true %>
  <%= javascript_include_tag "application", "data-turbolinks-track" => true %>


  <!-- Latest compiled and minified JavaScript -->
  <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

  <!-- DataTables CSS -->
  <link rel="stylesheet" type="text/css" href="http://ajax.aspnetcdn.com/ajax/jquery.dataTables/1.9.4/css/jquery.dataTables.css">

  <!-- jQuery -->
  <script type="text/javascript" charset="utf8" src="http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.8.2.min.js"></script>

  <!-- DataTables -->
  <script type="text/javascript" charset="utf8" src="http://ajax.aspnetcdn.com/ajax/jquery.dataTables/1.9.4/jquery.dataTables.min.js"></script>

  <script>
  /**
   *  Neon Main JavaScript File
   *
   *  Theme by: www.laborator.co
   **/

  var public_vars = public_vars || {};

  ;(function($, window, undefined){

    "use strict";

    $(document).ready(function()
    {
      // Sidebar Menu var
      public_vars.$body     = $("body");
      public_vars.$pageContainer  = public_vars.$body.find(".page-container");
      public_vars.$chat       = public_vars.$pageContainer.find('#chat');
      public_vars.$horizontalMenu = public_vars.$pageContainer.find('header.navbar');
      public_vars.$sidebarMenu  = public_vars.$pageContainer.find('.sidebar-menu');
      public_vars.$mainMenu     = public_vars.$sidebarMenu.find('#main-menu');
      public_vars.$mainContent  = public_vars.$pageContainer.find('.main-content');
      public_vars.$sidebarUserEnv = public_vars.$sidebarMenu.find('.sidebar-user-info');
      public_vars.$sidebarUser  = public_vars.$sidebarUserEnv.find('.user-link');


      public_vars.$body.addClass('loaded');

      // Just to make sure...
      $(window).on('error', function(ev)
      {
        // Do not let page without showing if JS fails somewhere
        init_page_transitions();
      });

      if(public_vars.$pageContainer.hasClass('right-sidebar'))
      {
        public_vars.isRightSidebar = true;
      }




      // Sidebar Menu Setup
      setup_sidebar_menu();




      // Horizontal Menu Setup
      setup_horizontal_menu();




      // Sidebar Collapse icon
      public_vars.$sidebarMenu.find(".sidebar-collapse-icon").on('click', function(ev)
      {
        ev.preventDefault();

        var with_animation = $(this).hasClass('with-animation');

        toggle_sidebar_menu(with_animation);
      });




      // Mobile Sidebar Collapse icon
      public_vars.$sidebarMenu.find(".sidebar-mobile-menu a").on('click', function(ev)
      {
        ev.preventDefault();

        var with_animation = $(this).hasClass('with-animation');

        if(with_animation)
        {
          public_vars.$mainMenu.stop().slideToggle('normal', function()
          {
            public_vars.$mainMenu.css('height', 'auto');
          });
        }
        else
        {
          public_vars.$mainMenu.toggle();
        }
      });




      // Mobile Horizontal Menu Collapse icon
      public_vars.$horizontalMenu.find(".horizontal-mobile-menu a").on('click', function(ev)
      {
        ev.preventDefault();

        var $menu = public_vars.$horizontalMenu.find('.navbar-nav'),
          with_animation = $(this).hasClass('with-animation');

        if(with_animation)
        {
          $menu.stop().slideToggle('normal', function()
          {
            $menu.attr('height', 'auto');

            if($menu.css('display') == 'none')
            {
              $menu.attr('style', '');
            }
          });
        }
        else
        {
          $menu.toggle();
        }
      });




      // Close Sidebar if Tablet Screen is visible
      public_vars.$sidebarMenu.data('initial-state', (public_vars.$pageContainer.hasClass('sidebar-collapsed') ? 'closed' : 'open'));

      if(is('tabletscreen'))
      {
        hide_sidebar_menu(false);
      }




      // NiceScroll
      if($.isFunction($.fn.niceScroll))
      {
        var nicescroll_defaults = {
          cursorcolor: '#d4d4d4',
          cursorborder: '1px solid #ccc',
          railpadding: {right: 3},
          cursorborderradius: 1,
          autohidemode: true,
          sensitiverail: true
        };

        public_vars.$body.find('.dropdown .scroller').niceScroll(nicescroll_defaults);

        $(".dropdown").on("shown.bs.dropdown", function ()
        {
          $(".scroller").getNiceScroll().resize();
          $(".scroller").getNiceScroll().show();
        });

        var fixed_sidebar = $(".sidebar-menu.fixed");

        if(fixed_sidebar.length == 1)
        {
          var fs_tm = 0;

          fixed_sidebar.niceScroll({
            cursorcolor: '#454a54',
            cursorborder: '1px solid #454a54',
            railpadding: {right: 3},
            railalign: 'right',
            cursorborderradius: 1
          });

          fixed_sidebar.on('click', 'li a', function()
          {
            fixed_sidebar.getNiceScroll().resize();
            fixed_sidebar.getNiceScroll().show();

            window.clearTimeout(fs_tm);

            fs_tm = setTimeout(function()
            {
              fixed_sidebar.getNiceScroll().resize();
            }, 500);
          });
        }
      }




      // Scrollable
      if($.isFunction($.fn.slimScroll))
      {
        $(".scrollable").each(function(i, el)
        {
          var $this = $(el),
            height = attrDefault($this, 'height', $this.height());

          if($this.is(':visible'))
          {
            $this.removeClass('scrollable');

            if($this.height() < parseInt(height, 10))
            {
              height = $this.outerHeight(true) + 10;
            }

            $this.addClass('scrollable');
          }

          $this.css({maxHeight: ''}).slimScroll({
            height: height,
            position: attrDefault($this, 'scroll-position', 'right'),
            color: attrDefault($this, 'rail-color', '#000'),
            size: attrDefault($this, 'rail-width', 6),
            borderRadius: attrDefault($this, 'rail-radius', 3),
            opacity: attrDefault($this, 'rail-opacity', .3),
            alwaysVisible: parseInt(attrDefault($this, 'autohide', 1), 10) == 1 ? false : true
          });
        });
      }




      // Panels

      // Added on v1.1.4 - Fixed collapsing effect with panel tables
      $(".panel-heading").each(function(i, el)
      {
        var $this = $(el),
          $body = $this.next('table');

        $body.wrap('<div class="panel-body with-table"></div>');

        $body = $this.next('.with-table').next('table');
        $body.wrap('<div class="panel-body with-table"></div>');

      });

      continueWrappingPanelTables();
      // End of: Added on v1.1.4


      $('body').on('click', '.panel > .panel-heading > .panel-options > a[data-rel="reload"]', function(ev)
      {
        ev.preventDefault();

        var $this = jQuery(this).closest('.panel');

        blockUI($this);
        $this.addClass('reloading');

        setTimeout(function()
        {
          unblockUI($this)
          $this.removeClass('reloading');

        }, 900);

      }).on('click', '.panel > .panel-heading > .panel-options > a[data-rel="close"]', function(ev)
      {
        ev.preventDefault();

        var $this = $(this),
          $panel = $this.closest('.panel');

        var t = new TimelineLite({
          onComplete: function()
          {
            $panel.slideUp(function()
            {
              $panel.remove();
            });
          }
        });

        t.append( TweenMax.to($panel, .2, {css: {scale: 0.95}}) );
        t.append( TweenMax.to($panel, .5, {css: {autoAlpha: 0, transform: "translateX(100px) scale(.95)"}}) );

      }).on('click', '.panel > .panel-heading > .panel-options > a[data-rel="collapse"]', function(ev)
      {
        ev.preventDefault();

        var $this = $(this),
          $panel = $this.closest('.panel'),
          $body = $panel.children('.panel-body, .table'),
          do_collapse = ! $panel.hasClass('panel-collapse');

        if($panel.is('[data-collapsed="1"]'))
        {
          $panel.attr('data-collapsed', 0);
          $body.hide();
          do_collapse = false;
        }

        if(do_collapse)
        {
          $body.slideUp('normal', fit_main_content_height);
          $panel.addClass('panel-collapse');
        }
        else
        {
          $body.slideDown('normal', fit_main_content_height);
          $panel.removeClass('panel-collapse');
        }
      });














      // Added on v1.1

      // Sidebar User Links Popup
      if(public_vars.$sidebarUserEnv.length)
      {
        var $su_normal = public_vars.$sidebarUserEnv.find('.sui-normal'),
          $su_hover = public_vars.$sidebarUserEnv.find('.sui-hover');

        if($su_normal.length && $su_hover.length)
        {
          public_vars.$sidebarUser.on('click', function(ev)
          {
            ev.preventDefault();
            $su_hover.addClass('visible');
          });

          $su_hover.on('click', '.close-sui-popup', function(ev)
          {
            ev.preventDefault();
            $su_hover.addClass('going-invisible');
            $su_hover.removeClass('visible');

            setTimeout(function(){ $su_hover.removeClass('going-invisible'); }, 220);
          });
        }
      }
      // End of: Added on v1.1




  // Sidebar Menu Setup
  function setup_sidebar_menu()
  {
    var $ = jQuery,
      $items_with_submenu   = public_vars.$sidebarMenu.find('li:has(ul)'),
      submenu_options     = {
        submenu_open_delay: 0.5,
        submenu_open_easing: Sine.easeInOut,
        submenu_opened_class: 'opened'
      },
      root_level_class    = 'root-level',
      is_multiopen      = public_vars.$mainMenu.hasClass('multiple-expanded');

    public_vars.$mainMenu.find('> li').addClass(root_level_class);

    $items_with_submenu.each(function(i, el)
    {
      var $this = $(el),
        $link = $this.find('> a'),
        $submenu = $this.find('> ul');

      $this.addClass('has-sub');

      $link.click(function(ev)
      {
        ev.preventDefault();

        if( ! is_multiopen && $this.hasClass(root_level_class))
        {
          var close_submenus = public_vars.$mainMenu.find('.' + root_level_class).not($this).find('> ul');

          close_submenus.each(function(i, el)
          {
            var $sub = $(el);
            menu_do_collapse($sub, $sub.parent(), submenu_options);
          });
        }

        if( ! $this.hasClass(submenu_options.submenu_opened_class))
        {
          var current_height;

          if( ! $submenu.is(':visible'))
          {
            menu_do_expand($submenu, $this, submenu_options);
          }
        }
        else
        {
          menu_do_collapse($submenu, $this, submenu_options);
        }

        fit_main_content_height();
      });

    });

    // Open the submenus with "opened" class
    public_vars.$mainMenu.find('.'+submenu_options.submenu_opened_class+' > ul').addClass('visible');

    // Well, somebody may forgot to add "active" for all inhertiance, but we are going to help you (just in case) - we do this job for you for free :P!
    if(public_vars.$mainMenu.hasClass('auto-inherit-active-class'))
    {
      menu_set_active_class_to_parents( public_vars.$mainMenu.find('.active') );
    }

    // Search Input
    var $search_input = public_vars.$mainMenu.find('#search input[type="text"]'),
      $search_el = public_vars.$mainMenu.find('#search');

    public_vars.$mainMenu.find('#search form').submit(function(ev)
    {
      var is_collapsed = public_vars.$pageContainer.hasClass('sidebar-collapsed');

      if(is_collapsed)
      {
        if($search_el.hasClass('focused') == false)
        {
          ev.preventDefault();
          $search_el.addClass('focused');

          $search_input.focus();

          return false;
        }
      }
    });

    $search_input.on('blur', function(ev)
    {
      var is_collapsed = public_vars.$pageContainer.hasClass('sidebar-collapsed');

      if(is_collapsed)
      {
        $search_el.removeClass('focused');
      }
    });


    // Collapse Icon (mobile device visible)
    var show_hide_menu = $('');

    public_vars.$sidebarMenu.find('.logo-env').append(show_hide_menu);
  }


  function menu_do_expand($submenu, $this, options)
  {
    $submenu.addClass('visible').height('');
    current_height = $submenu.outerHeight();

    var props_from = {
      opacity: .2,
      height: 0,
      top: -20
    },
    props_to = {
      height: current_height,
      opacity: 1,
      top: 0
    };

    if(isxs())
    {
      delete props_from['opacity'];
      delete props_from['top'];

      delete props_to['opacity'];
      delete props_to['top'];
    }

    TweenMax.set($submenu, {css: props_from});

    $this.addClass(options.submenu_opened_class);

    TweenMax.to($submenu, options.submenu_open_delay, {css: props_to, ease: options.submenu_open_easing, onComplete: function()
    {
      $submenu.attr('style', '');
      fit_main_content_height();
    }});
  }


  function menu_do_collapse($submenu, $this, options)
  {
    if(public_vars.$pageContainer.hasClass('sidebar-collapsed') && $this.hasClass('root-level'))
    {
      return;
    }

    $this.removeClass(options.submenu_opened_class);

    TweenMax.to($submenu, options.submenu_open_delay, {css: {height: 0, opacity: .2}, ease: options.submenu_open_easing, onComplete: function()
    {
      $submenu.removeClass('visible');
      fit_main_content_height();
    }});
  }


  function menu_set_active_class_to_parents($active_element)
  {
    if($active_element.length)
    {
      var $parent = $active_element.parent().parent();

      $parent.addClass('active');

      if(! $parent.hasClass('root-level'))
        menu_set_active_class_to_parents($parent)
    }
  }

  /*
    Resuable Functions with Neon Theme

    ------

    Theme by: Laborator - www.laborator.co

    Developed by: Arlind Nushi
    Designed by: Art Ramadani
  */

  var public_vars = public_vars || {};


  // ! Sidebar Menu Options
  jQuery.extend(public_vars, {
    sidebarCollapseClass: 'sidebar-collapsed',
    sidebarOnTransitionClass: 'sidebar-is-busy',
    sidebarOnHideTransitionClass: 'sidebar-is-collapsing',
    sidebarOnShowTransitionClass: 'sidebar-is-showing',
    sidebarTransitionTime: 600, // ms
    isRightSidebar: false
  });

  function show_sidebar_menu(with_animation)
  {
    if(isxs())
      return;

    if(public_vars.isRightSidebar)
    {
      rb_show_sidebar_menu(with_animation);
      return;
    }

    if( ! with_animation)
    {
      public_vars.$pageContainer.removeClass(public_vars.sidebarCollapseClass);
    }
    else
    {
      if(public_vars.$mainMenu.data('is-busy') || ! public_vars.$pageContainer.hasClass(public_vars.sidebarCollapseClass))
        return;

      fit_main_content_height();

      var current_padding = parseInt(public_vars.$pageContainer.css('padding-left'), 10);

      // Check
      public_vars.$pageContainer.removeClass(public_vars.sidebarCollapseClass);

      var padding_left     = parseInt(public_vars.$pageContainer.css('padding-left'), 10),
        $span_elements   = public_vars.$mainMenu.find('li a span'),
        $submenus        = public_vars.$mainMenu.find('.has-sub > ul'),
        $search_input    = public_vars.$mainMenu.find('#search .search-input'),
        $search_button   = public_vars.$mainMenu.find('#search button'),
        $logo_env    = public_vars.$sidebarMenu.find('.logo-env'),
        $collapse_icon   = $logo_env.find('.sidebar-collapse'),
        $logo      = $logo_env.find('.logo'),
        $sidebar_ulink   = public_vars.$sidebarUser.find('span, strong'),

        logo_env_padding = parseInt($logo_env.css('padding'), 10);


      // Return to normal state
      public_vars.$pageContainer.addClass(public_vars.sidebarCollapseClass);

      // Showing Class
      setTimeout(function(){ public_vars.$pageContainer.addClass(public_vars.sidebarOnShowTransitionClass); }, 1);

      var padding_diff = padding_left - current_padding;

      // Start animation
      public_vars.$mainMenu.data('is-busy', true);

      public_vars.$pageContainer.addClass(public_vars.sidebarOnTransitionClass);


      public_vars.$pageContainer.transit({paddingLeft: padding_left}, public_vars.sidebarTransitionTime);
      public_vars.$sidebarMenu.transit({width: padding_left}, public_vars.sidebarTransitionTime);

      $logo_env.transit({padding: logo_env_padding}, public_vars.sidebarTransitionTime);


      // Second Phase
      setTimeout(function()
      {
        //public_vars.$pageContainer.removeClass(public_vars.sidebarCollapseClass);
        $logo.css({width: 'auto', height: 'auto'});

        TweenMax.set($logo, {css: {scaleY: 0}});
        //TMPTweenMax.set($search_input, {css: {opacity: 0, visibility: 'visible'}});

        TweenMax.to($logo, (public_vars.sidebarTransitionTime/2) / 1100, {css: {scaleY: 1}});

        //TMP$search_input.transit({opacity: 1}, public_vars.sidebarTransitionTime);

        // Third Phase
        setTimeout(function(){

          public_vars.$pageContainer.removeClass(public_vars.sidebarCollapseClass);

          $submenus.hide().filter('.visible').slideDown('normal', function()
          {
            $submenus.attr('style', '');
          });

          public_vars.$pageContainer.removeClass(public_vars.sidebarOnShowTransitionClass);

          // Last Phase
          setTimeout(function()
          {
            // Reset Vars
            public_vars.$pageContainer
            .add(public_vars.$sidebarMenu)
            .add($logo_env)
            .add($logo)
            .add($span_elements)
            .add($submenus)
            .attr('style', '');

            public_vars.$pageContainer.removeClass(public_vars.sidebarOnTransitionClass);

            public_vars.$mainMenu.data('is-busy', false); // Transition End


            fit_main_content_height();

          }, public_vars.sidebarTransitionTime);


        }, public_vars.sidebarTransitionTime/2);

      }, public_vars.sidebarTransitionTime/2);
    }
  }

  function hide_sidebar_menu(with_animation)
  {
    if(isxs())
      return;

    if(public_vars.isRightSidebar)
    {
      rb_hide_sidebar_menu(with_animation);
      return;
    }

    if( ! with_animation)
    {
      public_vars.$pageContainer.addClass(public_vars.sidebarCollapseClass);
    }
    else
    {
      if(public_vars.$mainMenu.data('is-busy') || public_vars.$pageContainer.hasClass(public_vars.sidebarCollapseClass))
        return;

      fit_main_content_height();

      var current_padding = parseInt(public_vars.$pageContainer.css('padding-left'), 10);

      // Check
      public_vars.$pageContainer.addClass(public_vars.sidebarCollapseClass);

      var padding_left     = parseInt(public_vars.$pageContainer.css('padding-left'), 10),
        $span_elements   = public_vars.$mainMenu.find('li a span'),
        $submenus        = public_vars.$mainMenu.find('.has-sub > ul'),
        $search_input    = public_vars.$mainMenu.find('#search .search-input'),
        $search_button   = public_vars.$mainMenu.find('#search button'),
        $logo_env    = public_vars.$sidebarMenu.find('.logo-env'),
        $collapse_icon   = $logo_env.find('.sidebar-collapse'),
        $logo      = $logo_env.find('.logo'),
        $sidebar_ulink   = public_vars.$sidebarUser.find('span, strong'),

        logo_env_padding = parseInt($logo_env.css('padding'), 10);


      // Return to normal state
      public_vars.$pageContainer.removeClass(public_vars.sidebarCollapseClass);

      var padding_diff = current_padding - padding_left;

      // Start animation (1)
      public_vars.$mainMenu.data('is-busy', true);


      // Add Classes & Hide Span Elements
      public_vars.$pageContainer.addClass(public_vars.sidebarOnTransitionClass);
      setTimeout(function(){ public_vars.$pageContainer.addClass(public_vars.sidebarOnHideTransitionClass); }, 1);

      TweenMax.to($submenus, public_vars.sidebarTransitionTime / 1100, {css: {height: 0}});

      //TMP$search_input.transit({opacity: 0}, public_vars.sidebarTransitionTime);
      $search_button.transit({right: padding_diff}, public_vars.sidebarTransitionTime);
      $logo.transit({scale: [1,0], perspective: 300/*, opacity: 0*/}, public_vars.sidebarTransitionTime/2);
      $logo_env.transit({padding: logo_env_padding}, public_vars.sidebarTransitionTime);
      //$collapse_icon.transit({left: -padding_diff+3}, public_vars.sidebarTransitionTime * 5);

      if( ! rtl())
      {
        TweenMax.to($collapse_icon, .5, {css: {left: -padding_diff+3}, delay: .1});
      }

      public_vars.$pageContainer.transit({paddingLeft: padding_left}, public_vars.sidebarTransitionTime);

      TweenMax.set($sidebar_ulink, {css: {opacity: 0}});


      setTimeout(function()
      {
        // In the end do some stuff
        public_vars.$pageContainer
        .add(public_vars.$sidebarMenu)
        .add($search_input)
        .add($search_button)
        .add($logo_env)
        .add($logo)
        .add($span_elements)
        .add($collapse_icon)
        .add($submenus)
        .add($sidebar_ulink)
        .add(public_vars.$mainMenu)
        .attr('style', '');

        public_vars.$pageContainer.addClass(public_vars.sidebarCollapseClass);

        public_vars.$mainMenu.data('is-busy', false);
        public_vars.$pageContainer.removeClass(public_vars.sidebarOnTransitionClass).removeClass(public_vars.sidebarOnHideTransitionClass);

        fit_main_content_height();

      }, public_vars.sidebarTransitionTime);
    }
  }

  function toggle_sidebar_menu(with_animation)
  {
    var open = public_vars.$pageContainer.hasClass(public_vars.sidebarCollapseClass);

    if(open)
    {
      show_sidebar_menu(with_animation);
    }
    else
    {
      hide_sidebar_menu(with_animation);
    }
  }


  // Added on v1.5
  function rtl() // checks whether the content is in RTL mode
  {
    if(typeof window.isRTL == 'boolean')
      return window.isRTL;

    window.isRTL = jQuery("html").get(0).dir == 'rtl' ? true : false;

    return window.isRTL;
  }

  // Right to left Coeficient
  function rtlc()
  {
    return rtl() ? -1 : 1;
  }


  // Right sidebar closing methods
  function rb_hide_sidebar_menu(with_animation)
  {
    if( ! with_animation)
    {
      public_vars.$pageContainer.addClass(public_vars.sidebarCollapseClass);
    }
    else
    {
      if(public_vars.$mainMenu.data('is-busy') || public_vars.$pageContainer.hasClass(public_vars.sidebarCollapseClass))
        return;

      fit_main_content_height();

      var current_padding = parseInt(public_vars.$pageContainer.css('padding-left'), 10);

      // Check
      public_vars.$pageContainer.addClass(public_vars.sidebarCollapseClass);

      var padding_left     = parseInt(public_vars.$pageContainer.css('padding-left'), 10),
        $span_elements   = public_vars.$mainMenu.find('li a span'),
        $submenus        = public_vars.$mainMenu.find('.has-sub > ul'),
        $search_input    = public_vars.$mainMenu.find('#search .search-input'),
        $search_button   = public_vars.$mainMenu.find('#search button'),
        $logo_env    = public_vars.$sidebarMenu.find('.logo-env'),
        $collapse_icon   = $logo_env.find('.sidebar-collapse'),
        $logo      = $logo_env.find('.logo'),
        $sidebar_ulink   = public_vars.$sidebarUser.find('span, strong'),

        logo_env_padding = parseInt($logo_env.css('padding'), 10);


      // Return to normal state
      public_vars.$pageContainer.removeClass(public_vars.sidebarCollapseClass);

      var padding_diff = current_padding - padding_left;

      // Start animation (1)
      public_vars.$mainMenu.data('is-busy', true);


      // Add Classes & Hide Span Elements
      public_vars.$pageContainer.addClass(public_vars.sidebarOnTransitionClass);
      setTimeout(function(){ public_vars.$pageContainer.addClass(public_vars.sidebarOnHideTransitionClass); }, 1);

      TweenMax.to($submenus, public_vars.sidebarTransitionTime / 1100, {css: {height: 0}});

      $logo.transit({scale: [1,0], perspective: 300/*, opacity: 0*/}, public_vars.sidebarTransitionTime/2);
      $logo_env.transit({padding: logo_env_padding}, public_vars.sidebarTransitionTime);


      setTimeout(function()
      {
        public_vars.$pageContainer.addClass('sidebar-collapsing-phase-2');

        setTimeout(function()
        {
          public_vars.$mainMenu.data('is-busy', false);
          public_vars.$pageContainer.addClass(public_vars.sidebarCollapseClass);
          public_vars.$pageContainer.removeClass('sidebar-collapsing-phase-2');

          console.log(public_vars.sidebarTransitionTime);
          // In the end do some stuff
          public_vars.$pageContainer
          .add(public_vars.$sidebarMenu)
          .add($search_input)
          .add($search_button)
          .add($logo_env)
          .add($logo)
          .add($span_elements)
          .add($collapse_icon)
          .add($submenus)
          .add($sidebar_ulink)
          .add(public_vars.$mainMenu)
          .add($collapse_icon)
          .attr('style', '');

          public_vars.$pageContainer.removeClass(public_vars.sidebarOnTransitionClass).removeClass(public_vars.sidebarOnHideTransitionClass);

          fit_main_content_height();


        }, public_vars.sidebarTransitionTime);

      }, public_vars.sidebarTransitionTime / 2);
    }
  }

  function rb_show_sidebar_menu(with_animation)
  {
    if( ! with_animation)
    {
      public_vars.$pageContainer.removeClass(public_vars.sidebarCollapseClass);
    }
    else
    {
      if(public_vars.$mainMenu.data('is-busy') || ! public_vars.$pageContainer.hasClass(public_vars.sidebarCollapseClass))
        return;

      fit_main_content_height();

      var current_padding = parseInt(public_vars.$pageContainer.css('padding-right'), 10);

      // Check
      public_vars.$pageContainer.removeClass(public_vars.sidebarCollapseClass);

      var padding_right     = parseInt(public_vars.$pageContainer.css('padding-right'), 10),
        $span_elements   = public_vars.$mainMenu.find('li a span'),
        $submenus        = public_vars.$mainMenu.find('.has-sub > ul'),
        $search_input    = public_vars.$mainMenu.find('#search .search-input'),
        $search_button   = public_vars.$mainMenu.find('#search button'),
        $logo_env    = public_vars.$sidebarMenu.find('.logo-env'),
        $collapse_icon   = $logo_env.find('.sidebar-collapse'),
        $logo      = $logo_env.find('.logo'),
        $sidebar_ulink   = public_vars.$sidebarUser.find('span, strong'),

        logo_env_padding = parseInt($logo_env.css('padding'), 10);


      // Return to normal state
      public_vars.$pageContainer.addClass(public_vars.sidebarCollapseClass);

      // Showing Class
      setTimeout(function(){ public_vars.$pageContainer.addClass(public_vars.sidebarOnShowTransitionClass); }, 1);

      var padding_diff = padding_right - current_padding;

      // Start animation
      public_vars.$mainMenu.data('is-busy', true);

      public_vars.$pageContainer.addClass(public_vars.sidebarOnTransitionClass);


      public_vars.$pageContainer.transit({paddingRight: padding_right}, public_vars.sidebarTransitionTime);
      public_vars.$sidebarMenu.transit({width: padding_right}, public_vars.sidebarTransitionTime);

      $logo_env.transit({padding: logo_env_padding}, public_vars.sidebarTransitionTime);

      // Second Phase
      setTimeout(function()
      {
        public_vars.$pageContainer.removeClass(public_vars.sidebarCollapseClass);

        $submenus.hide().filter('.visible').slideDown('normal', function()
        {
          $submenus.attr('style', '');
        });

        // Logo Animation
        $logo.css({width: 'auto', height: 'auto'});
        TweenMax.set($logo, {css: {scaleY: 0}});

        TweenMax.to($logo, (public_vars.sidebarTransitionTime/2) / 1000, {css: {scaleY: 1}});

        setTimeout(function()
        {
          public_vars.$pageContainer.removeClass(public_vars.sidebarOnTransitionClass);
          public_vars.$pageContainer.removeClass(public_vars.sidebarOnShowTransitionClass);


          setTimeout(function()
          {
            // Reset Vars
            public_vars.$pageContainer
            .add(public_vars.$sidebarMenu)
            .add($logo_env)
            .add($logo)
            .add($span_elements)
            .add($submenus)
            .add($collapse_icon)
            .attr('style', '');

            public_vars.$pageContainer.removeClass(public_vars.sidebarOnTransitionClass);

            public_vars.$mainMenu.data('is-busy', false); // Transition End


            fit_main_content_height();

          }, public_vars.sidebarTransitionTime);

        }, public_vars.sidebarTransitionTime/2);

      }, public_vars.sidebarTransitionTime/2);
    }
  }


  var public_vars = public_vars || {};

  jQuery.extend(public_vars, {

    breakpoints: {
      largescreen:  [991, -1],
      tabletscreen:   [768, 990],
      devicescreen:   [420, 767],
      sdevicescreen:  [0, 419]
    },

    lastBreakpoint: null
  });


  /* Main Function that will be called each time when the screen breakpoint changes */
  function resizable(breakpoint)
  {
    var sb_with_animation;


    // Large Screen Specific Script
    if(is('largescreen'))
    {
      sb_with_animation = public_vars.$sidebarMenu.find(".sidebar-collapse-icon").hasClass('with-animation') || public_vars.$sidebarMenu.hasClass('with-animation');

      if(public_vars.$sidebarMenu.data('initial-state') == 'open')
      {
        show_sidebar_menu(sb_with_animation);
      }
      else
      {
        hide_sidebar_menu(sb_with_animation);
      }
    }


    // Tablet or larger screen
    if(ismdxl())
    {
      public_vars.$mainMenu.attr('style', '');
    }


    // Tablet Screen Specific Script
    if(is('tabletscreen'))
    {
      sb_with_animation = public_vars.$sidebarMenu.find(".sidebar-collapse-icon").hasClass('with-animation') || public_vars.$sidebarMenu.hasClass('with-animation');

      hide_sidebar_menu(sb_with_animation);
    }


    // Tablet Screen Specific Script
    if(isxs())
    {
      public_vars.$pageContainer.removeClass('sidebar-collapsed');
    }


    // Trigger Event
    jQuery(window).trigger('neon.resize');


    // Fit main content height
    fit_main_content_height();
  }



  /* Functions */

  // Get current breakpoint
  function get_current_breakpoint()
  {
    var width = jQuery(window).width(),
      breakpoints = public_vars.breakpoints;

    for(var breakpont_label in breakpoints)
    {
      var bp_arr = breakpoints[breakpont_label],
        min = bp_arr[0],
        max = bp_arr[1];

      if(max == -1)
        max = width;

      if(min <= width && max >= width)
      {
        return breakpont_label;
      }
    }

    return null;
  }


  // Check current screen breakpoint
  function is(screen_label)
  {
    return get_current_breakpoint() == screen_label;
  }


  // Is xs device
  function isxs()
  {
    return is('devicescreen') || is('sdevicescreen');
  }

  // Is md or xl
  function ismdxl()
  {
    return is('tabletscreen') || is('largescreen');
  }


  // Trigger Resizable Function
  function trigger_resizable()
  {
    if(public_vars.lastBreakpoint != get_current_breakpoint())
    {
      public_vars.lastBreakpoint = get_current_breakpoint();
      resizable(public_vars.lastBreakpoint);
    }
  }




  </script>

  <%= csrf_meta_tags %>
</head>
<body class="page-body">

<%= yield %>

</body>
</html>
